#!/usr/bin/env python3

import os
import sys
sys.path.insert(0, os.path.realpath(
    os.path.join(os.path.dirname(__file__), "..")))

from ruamel import yaml
from postcard.trello import Trello
from postcard.auth import get_access_token


def load_yaml(filename):
    with open(filename, 'r') as f:
        data = yaml.safe_load(f)
    return data

def save_yaml(filename, data):
    with open(filename, 'w') as f:
        yaml.dump(data, f)

def get_id_for_label(label, acceptable_labels):
    '''Checks label is a valid name, color, or label id.

    @return The label's id.
    '''
    assert(type(label) is str)
    assert(type(acceptable_labels) is list)

    for a in acceptable_labels:
        if (a['name'].lower() == label.lower() or
            a['color'].lower() == label.lower() or
            a['id'].lower() == label.lower()):
            return a['id']
    return None

def validate_labels(labels, acceptable_labels):
    '''Looks up ids for raw list of labels.

    @return Tuple of (valid label ids, invalid labels).
    '''
    card_label_ids = []
    invalid_labels = []
    if labels is None:
        labels = []
    for label in labels:
        if ',' in label:
            # Bit of recursion to handle comma-separated labels
            good,bad = validate_labels(label.split(','), acceptable_labels)
            card_label_ids.extend(good)
            invalid_labels.extend(bad)
        else:
            # Just a regular label
            label_id = get_id_for_label(label, board_labels)
            if not label_id:
                invalid_labels.append(label)
            else:
                card_label_ids.append(label_id)
    return card_label_ids, invalid_labels

def read_multiline():
    reading = True
    description = ''
    while reading:
        try:
            line = input()
            if line == '':
                reading = False
            else:
                description += "\n" + line
        except:
            print('Invalid entry')
            reading = True
    return description

if __name__ == "__main__":
    import os.path
    import sys
    import re
    import argparse

    # Option handling
    parser = argparse.ArgumentParser(description='Posts cards to a Trello.com kanban board')
    parser.add_argument('-A', '--oauth',
                        type=str, dest='oauth_filename', action='store',
                        default="~/.config/postcard/oauth.yml",
                        help="Location of config file")
    parser.add_argument('-C', '--config',
                        type=str, dest='config_filename', action='store',
                        default="~/.config/postcard/config.yml",
                        help="Location of config file")
    parser.add_argument('-b', '--board',
                        type=str, dest='board', action='store', required=True,
                        help="Trello board URL")
    parser.add_argument('-c', '--col', '--column',
                        type=int, dest='column', action='store', default=0,
                        help="Column number of the board")
    parser.add_argument('-l', '--label',
                        type=str, dest='labels', action='append',
                        help='Label to add to the card')
    parser.add_argument('name', type=str, nargs=argparse.REMAINDER,
                        help="Card name")
    args = parser.parse_args()

    # Configuration
    config_path = os.path.expanduser(args.config_filename)
    try:
        config = load_yaml(config_path)
    except:
        sys.stderr.write("Error: Missing config file %s\n" %(args.config_filename))
        sys.exit(1)
    if 'api_key' not in config.keys():
        sys.stderr.write("Error: api_key value missing in %s\n" %(args.config_filename))
        sys.exit(1)

    # Credentials
    oauth_path = os.path.expanduser(args.oauth_filename)
    try:
        oauth = load_yaml(oauth_path)
    except:
        oauth = None
    if oauth is None or 'oauth_token' not in oauth.keys():
        oauth = None

    # Attempt to create trello client using cached oauth credentials
    trello = None
    if oauth is not None:
        # We have a cached oauth token, let's try using it
        try:
            trello = Trello(config['api_key'], oauth['oauth_token'])
        except:
            # No good, may need to re-auth
            pass

    # Attempt again to create trello client, this time using fresh oauth credentials
    if trello is None:
        oauth = get_access_token(config['api_key'], config['api_secret'], "read,write", "postcard")
        assert('oauth_token' in oauth.keys())
        save_yaml(oauth_path, oauth)
        trello = Trello(config['api_key'], oauth['oauth_token'])

    # Failure (maybe we weren't able to authorize?)
    if trello is None:
        sys.stderr.write("Error: Could not establish connection to Trello.com\n")
        sys.exit(1)

    # Board
    m = re.match("^https://trello.com/b/([^/]*)/.*$", args.board)
    if not m:
        sys.stderr.write("Error: Unrecognized Trello board URL: %s\n", args.board)
        sys.exit(1)
    board = m.group(1)

    # Card name
    if not args.name or len(args.name)<1:
        sys.stderr.write("Error: Must specify card's name\n")
        parser.print_help(sys.stderr)
        sys.exit(1)
    card_name = " ".join(args.name)

    # Get id's for the labels
    board_labels = trello.get_board_labels(board)
    card_label_ids, invalid_labels = validate_labels(args.labels, board_labels)
    if len(invalid_labels)>0:
        sys.stderr.write("Error: Invalid label(s) %s specified\n" %(
            ','.join(invalid_labels)))
        sys.exit(1)

    # Select list to add the card to
    board_lists = trello.get_board_lists(board)
    if (args.column < 1) or args.column > len(board_lists)-1:
        sys.stderr.write("Error: Invalid list index %d\n" %(args.column))
        sys.exit(1)
    target_list = board_lists[args.column]

    # Gather the description text from the user
    print("\nCard description (end with blank line):\n")
    description = read_multiline()

    # Add the card
    assert('id' in target_list.keys())
    card = trello.add_card(
        target_list['id'],
        card_name,
        desc=description,
        pos="bottom",
        labels=",".join(card_label_ids))

    # Display card data:
    print("Card added: %s" %(card['url']))
    
